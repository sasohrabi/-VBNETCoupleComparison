//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("1998/06/24 01:00:00 ق.ظ")]

namespace AxMSFlexGridLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{6262d3a0-531b-11cf-91f6-c2863c385e30}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultProperty("Text")]
    public class AxMSFlexGrid : System.Windows.Forms.AxHost {
        
        private MSFlexGridLib.IMSFlexGrid ocx;
        
        private AxMSFlexGridEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMSFlexGrid() : 
                base("6262d3a0-531b-11cf-91f6-c2863c385e30") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual int Rows {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Rows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Rows;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Rows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Rows = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual int Cols {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Cols;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Cols = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual int FixedRows {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FixedRows;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FixedRows = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual int FixedCols {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedCols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FixedCols;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedCols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FixedCols = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual short Version {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Version", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Version;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual string FormatString {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FormatString;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FormatString = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int TopRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TopRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TopRow;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TopRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TopRow = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual int LeftCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LeftCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LeftCol;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LeftCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LeftCol = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual int Row {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Row", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Row;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Row", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Row = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual int Col {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Col", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Col;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Col", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Col = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual int RowSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowSel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowSel = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual int ColSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColSel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColSel = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public override string Text {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Text;
                }
                else {
                    return base.Text;
                }
            }
            set {
                base.Text = value;
                if ((this.ocx != null)) {
                    this.ocx.Text = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorFixed)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorFixed = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ForeColorFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ForeColorFixed)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColorFixed = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorSel)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorSel = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ForeColorSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ForeColorSel)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColorSel = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorBkg {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorBkg", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorBkg)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorBkg", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorBkg = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool WordWrap {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WordWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.WordWrap;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WordWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.WordWrap = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(84)]
        public virtual float FontWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontWidth = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(77)]
        public virtual string CellFontName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontName = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(78)]
        public virtual float CellFontSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontSize = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(79)]
        public virtual bool CellFontBold {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontBold;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontBold = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(80)]
        public virtual bool CellFontItalic {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontItalic;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontItalic = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(81)]
        public virtual bool CellFontUnderline {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontUnderline;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontUnderline = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(82)]
        public virtual bool CellFontStrikeThrough {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontStrikeThrough", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontStrikeThrough;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontStrikeThrough", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontStrikeThrough = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(83)]
        public virtual float CellFontWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual MSFlexGridLib.TextStyleSettings TextStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual MSFlexGridLib.TextStyleSettings TextStyleFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyleFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextStyleFixed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyleFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextStyleFixed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool ScrollTrack {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTrack", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScrollTrack;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTrack", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScrollTrack = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual MSFlexGridLib.FocusRectSettings FocusRect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FocusRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FocusRect;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FocusRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FocusRect = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual MSFlexGridLib.HighLightSettings HighLight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HighLight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HighLight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HighLight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HighLight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool Redraw {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Redraw;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Redraw = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual MSFlexGridLib.ScrollBarsSettings ScrollBars {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollBars", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScrollBars;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollBars", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScrollBars = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual int MouseRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MouseRow;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual int MouseCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MouseCol;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual int CellLeft {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellLeft;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int CellTop {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellTop;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual int CellWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellWidth;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual int CellHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellHeight;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual int RowHeightMin {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowHeightMin", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowHeightMin;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowHeightMin", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowHeightMin = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-511)]
        public virtual MSFlexGridLib.FillStyleSettings FillStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FillStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FillStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FillStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FillStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual MSFlexGridLib.GridLineSettings GridLines {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLines;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLines = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual MSFlexGridLib.GridLineSettings GridLinesFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLinesFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLinesFixed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLinesFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLinesFixed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color GridColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.GridColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color GridColorFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.GridColorFixed)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridColorFixed = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CellBackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CellBackColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellBackColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CellForeColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CellForeColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellForeColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual short CellAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellAlignment = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual MSFlexGridLib.TextStyleSettings CellTextStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellTextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellTextStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellTextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellTextStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual short CellPictureAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPictureAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellPictureAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPictureAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellPictureAlignment = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(45)]
        public virtual string Clip {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clip", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Clip;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clip", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Clip = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(46)]
        public virtual short Sort {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sort", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Sort = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(47)]
        public virtual MSFlexGridLib.SelectionModeSettings SelectionMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectionMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectionMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectionMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectionMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(48)]
        public virtual MSFlexGridLib.MergeCellsSettings MergeCells {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCells", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MergeCells;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCells", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MergeCells = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(51)]
        public virtual bool AllowBigSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowBigSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowBigSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowBigSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowBigSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(52)]
        public virtual MSFlexGridLib.AllowUserResizeSettings AllowUserResizing {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowUserResizing", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowUserResizing;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowUserResizing", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowUserResizing = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual MSFlexGridLib.BorderStyleSettings BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-520)]
        public virtual MSFlexGridLib.AppearanceSettings Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(53)]
        public virtual MSFlexGridLib.MousePointerSettings MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(54)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(50)]
        public virtual MSFlexGridLib.PictureTypeSettings PictureType {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PictureType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PictureType;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PictureType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PictureType = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(49)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image Picture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Picture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.Picture);
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image CellPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.CellPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(76)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual MSFlexGridLib.IRowCursor DataSource {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataSource", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DataSource;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataSource", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DataSource = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(89)]
        public virtual short GridLineWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLineWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLineWidth = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(91)]
        public virtual string FontName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontName = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(92)]
        public virtual float FontSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontSize = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(93)]
        public virtual bool FontBold {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontBold;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontBold = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(94)]
        public virtual bool FontItalic {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontItalic;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontItalic = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(95)]
        public virtual bool FontStrikethru {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontStrikethru", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontStrikethru;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontStrikethru", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontStrikethru = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(96)]
        public virtual bool FontUnderline {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontUnderline;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontUnderline = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-611)]
        public override bool RightToLeft {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.RightToLeft;
                }
                else {
                    return base.RightToLeft;
                }
            }
            set {
                base.RightToLeft = value;
                if ((this.ocx != null)) {
                    this.ocx.RightToLeft = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSFlexGridLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        public event System.EventHandler ClickEvent;
        
        public event DMSFlexGridEvents_KeyDownEventHandler KeyDownEvent;
        
        public event System.EventHandler DblClick;
        
        public event DMSFlexGridEvents_KeyPressEventHandler KeyPressEvent;
        
        public event DMSFlexGridEvents_KeyUpEventHandler KeyUpEvent;
        
        public event DMSFlexGridEvents_MouseDownEventHandler MouseDownEvent;
        
        public event DMSFlexGridEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event DMSFlexGridEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler SelChange;
        
        public event System.EventHandler RowColChange;
        
        public event System.EventHandler EnterCell;
        
        public event System.EventHandler LeaveCell;
        
        public event System.EventHandler Scroll;
        
        public event DMSFlexGridEvents_CompareEventHandler Compare;
        
        public event DMSFlexGridEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event DMSFlexGridEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event DMSFlexGridEvents_OLESetDataEventHandler OLESetData;
        
        public event DMSFlexGridEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event DMSFlexGridEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event DMSFlexGridEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual string get_TextArray(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_TextArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_TextArray(index)));
            return returnValue;
        }
        
        public virtual void set_TextArray(int index, string textArray) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_TextArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_TextArray(index, textArray);
        }
        
        public virtual short get_ColAlignment(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.get_ColAlignment(index)));
            return returnValue;
        }
        
        public virtual void set_ColAlignment(int index, short colAlignment) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColAlignment(index, colAlignment);
        }
        
        public virtual int get_ColWidth(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColWidth(index)));
            return returnValue;
        }
        
        public virtual void set_ColWidth(int index, int colWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColWidth(index, colWidth);
        }
        
        public virtual int get_RowHeight(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_RowHeight(index)));
            return returnValue;
        }
        
        public virtual void set_RowHeight(int index, int rowHeight) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowHeight(index, rowHeight);
        }
        
        public virtual bool get_MergeRow(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_MergeRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_MergeRow(index)));
            return returnValue;
        }
        
        public virtual void set_MergeRow(int index, bool mergeRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_MergeRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_MergeRow(index, mergeRow);
        }
        
        public virtual bool get_MergeCol(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_MergeCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_MergeCol(index)));
            return returnValue;
        }
        
        public virtual void set_MergeCol(int index, bool mergeCol) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_MergeCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_MergeCol(index, mergeCol);
        }
        
        public virtual void set_RowPosition(int index, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowPosition(index, param0);
        }
        
        public virtual void set_ColPosition(int index, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColPosition(index, param0);
        }
        
        public virtual int get_RowData(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_RowData(index)));
            return returnValue;
        }
        
        public virtual void set_RowData(int index, int rowData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowData(index, rowData);
        }
        
        public virtual int get_ColData(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColData(index)));
            return returnValue;
        }
        
        public virtual void set_ColData(int index, int colData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColData(index, colData);
        }
        
        public virtual string get_TextMatrix(int row, int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_TextMatrix", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_TextMatrix(row, col)));
            return returnValue;
        }
        
        public virtual void set_TextMatrix(int row, int col, string textMatrix) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_TextMatrix", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_TextMatrix(row, col, textMatrix);
        }
        
        public virtual void AddItem(string item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    item,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(MSFlexGridLib.IMSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("AddItem");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void AddItem(string item, object index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddItem(item, index);
        }
        
        public virtual void RemoveItem(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveItem(index);
        }
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual bool get_RowIsVisible(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowIsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_RowIsVisible(index)));
            return returnValue;
        }
        
        public virtual bool get_ColIsVisible(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColIsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ColIsVisible(index)));
            return returnValue;
        }
        
        public virtual int get_RowPos(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowPos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_RowPos(index)));
            return returnValue;
        }
        
        public virtual int get_ColPos(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColPos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColPos(index)));
            return returnValue;
        }
        
        public virtual short get_FixedAlignment(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_FixedAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.get_FixedAlignment(index)));
            return returnValue;
        }
        
        public virtual void set_FixedAlignment(int index, short fixedAlignment) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_FixedAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_FixedAlignment(index, fixedAlignment);
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMSFlexGridEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSFlexGridLib.DMSFlexGridEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSFlexGridLib.IMSFlexGrid)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, DMSFlexGridEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, DMSFlexGridEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, DMSFlexGridEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, DMSFlexGridEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, DMSFlexGridEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, DMSFlexGridEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnSelChange(object sender, System.EventArgs e) {
            if ((this.SelChange != null)) {
                this.SelChange(sender, e);
            }
        }
        
        internal void RaiseOnRowColChange(object sender, System.EventArgs e) {
            if ((this.RowColChange != null)) {
                this.RowColChange(sender, e);
            }
        }
        
        internal void RaiseOnEnterCell(object sender, System.EventArgs e) {
            if ((this.EnterCell != null)) {
                this.EnterCell(sender, e);
            }
        }
        
        internal void RaiseOnLeaveCell(object sender, System.EventArgs e) {
            if ((this.LeaveCell != null)) {
                this.LeaveCell(sender, e);
            }
        }
        
        internal void RaiseOnScroll(object sender, System.EventArgs e) {
            if ((this.Scroll != null)) {
                this.Scroll(sender, e);
            }
        }
        
        internal void RaiseOnCompare(object sender, DMSFlexGridEvents_CompareEvent e) {
            if ((this.Compare != null)) {
                this.Compare(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, DMSFlexGridEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, DMSFlexGridEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, DMSFlexGridEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, DMSFlexGridEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, DMSFlexGridEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, DMSFlexGridEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void DMSFlexGridEvents_KeyDownEventHandler(object sender, DMSFlexGridEvents_KeyDownEvent e);
    
    public class DMSFlexGridEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public DMSFlexGridEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void DMSFlexGridEvents_KeyPressEventHandler(object sender, DMSFlexGridEvents_KeyPressEvent e);
    
    public class DMSFlexGridEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public DMSFlexGridEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void DMSFlexGridEvents_KeyUpEventHandler(object sender, DMSFlexGridEvents_KeyUpEvent e);
    
    public class DMSFlexGridEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public DMSFlexGridEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void DMSFlexGridEvents_MouseDownEventHandler(object sender, DMSFlexGridEvents_MouseDownEvent e);
    
    public class DMSFlexGridEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public DMSFlexGridEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void DMSFlexGridEvents_MouseMoveEventHandler(object sender, DMSFlexGridEvents_MouseMoveEvent e);
    
    public class DMSFlexGridEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public DMSFlexGridEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void DMSFlexGridEvents_MouseUpEventHandler(object sender, DMSFlexGridEvents_MouseUpEvent e);
    
    public class DMSFlexGridEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public DMSFlexGridEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void DMSFlexGridEvents_CompareEventHandler(object sender, DMSFlexGridEvents_CompareEvent e);
    
    public class DMSFlexGridEvents_CompareEvent {
        
        public int row1;
        
        public int row2;
        
        public short cmp;
        
        public DMSFlexGridEvents_CompareEvent(int row1, int row2, short cmp) {
            this.row1 = row1;
            this.row2 = row2;
            this.cmp = cmp;
        }
    }
    
    public delegate void DMSFlexGridEvents_OLEStartDragEventHandler(object sender, DMSFlexGridEvents_OLEStartDragEvent e);
    
    public class DMSFlexGridEvents_OLEStartDragEvent {
        
        public MSFlexGridLib.DataObject data;
        
        public int allowedEffects;
        
        public DMSFlexGridEvents_OLEStartDragEvent(MSFlexGridLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void DMSFlexGridEvents_OLEGiveFeedbackEventHandler(object sender, DMSFlexGridEvents_OLEGiveFeedbackEvent e);
    
    public class DMSFlexGridEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public DMSFlexGridEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void DMSFlexGridEvents_OLESetDataEventHandler(object sender, DMSFlexGridEvents_OLESetDataEvent e);
    
    public class DMSFlexGridEvents_OLESetDataEvent {
        
        public MSFlexGridLib.DataObject data;
        
        public short dataFormat;
        
        public DMSFlexGridEvents_OLESetDataEvent(MSFlexGridLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void DMSFlexGridEvents_OLECompleteDragEventHandler(object sender, DMSFlexGridEvents_OLECompleteDragEvent e);
    
    public class DMSFlexGridEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public DMSFlexGridEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void DMSFlexGridEvents_OLEDragOverEventHandler(object sender, DMSFlexGridEvents_OLEDragOverEvent e);
    
    public class DMSFlexGridEvents_OLEDragOverEvent {
        
        public MSFlexGridLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public DMSFlexGridEvents_OLEDragOverEvent(MSFlexGridLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void DMSFlexGridEvents_OLEDragDropEventHandler(object sender, DMSFlexGridEvents_OLEDragDropEvent e);
    
    public class DMSFlexGridEvents_OLEDragDropEvent {
        
        public MSFlexGridLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public DMSFlexGridEvents_OLEDragDropEvent(MSFlexGridLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMSFlexGridEventMulticaster : MSFlexGridLib.DMSFlexGridEvents {
        
        private AxMSFlexGrid parent;
        
        public AxMSFlexGridEventMulticaster(AxMSFlexGrid parent) {
            this.parent = parent;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            DMSFlexGridEvents_KeyDownEvent keydownEvent = new DMSFlexGridEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            DMSFlexGridEvents_KeyPressEvent keypressEvent = new DMSFlexGridEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            DMSFlexGridEvents_KeyUpEvent keyupEvent = new DMSFlexGridEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            DMSFlexGridEvents_MouseDownEvent mousedownEvent = new DMSFlexGridEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            DMSFlexGridEvents_MouseMoveEvent mousemoveEvent = new DMSFlexGridEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            DMSFlexGridEvents_MouseUpEvent mouseupEvent = new DMSFlexGridEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void SelChange() {
            System.EventArgs selchangeEvent = new System.EventArgs();
            this.parent.RaiseOnSelChange(this.parent, selchangeEvent);
        }
        
        public virtual void RowColChange() {
            System.EventArgs rowcolchangeEvent = new System.EventArgs();
            this.parent.RaiseOnRowColChange(this.parent, rowcolchangeEvent);
        }
        
        public virtual void EnterCell() {
            System.EventArgs entercellEvent = new System.EventArgs();
            this.parent.RaiseOnEnterCell(this.parent, entercellEvent);
        }
        
        public virtual void LeaveCell() {
            System.EventArgs leavecellEvent = new System.EventArgs();
            this.parent.RaiseOnLeaveCell(this.parent, leavecellEvent);
        }
        
        public virtual void Scroll() {
            System.EventArgs scrollEvent = new System.EventArgs();
            this.parent.RaiseOnScroll(this.parent, scrollEvent);
        }
        
        public virtual void Compare(int row1, int row2, ref short cmp) {
            DMSFlexGridEvents_CompareEvent compareEvent = new DMSFlexGridEvents_CompareEvent(row1, row2, cmp);
            this.parent.RaiseOnCompare(this.parent, compareEvent);
            cmp = compareEvent.cmp;
        }
        
        public virtual void OLEStartDrag(ref MSFlexGridLib.DataObject data, ref int allowedEffects) {
            DMSFlexGridEvents_OLEStartDragEvent olestartdragEvent = new DMSFlexGridEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            DMSFlexGridEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new DMSFlexGridEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSFlexGridLib.DataObject data, ref short dataFormat) {
            DMSFlexGridEvents_OLESetDataEvent olesetdataEvent = new DMSFlexGridEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            DMSFlexGridEvents_OLECompleteDragEvent olecompletedragEvent = new DMSFlexGridEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSFlexGridLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            DMSFlexGridEvents_OLEDragOverEvent oledragoverEvent = new DMSFlexGridEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSFlexGridLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            DMSFlexGridEvents_OLEDragDropEvent oledragdropEvent = new DMSFlexGridEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
}
